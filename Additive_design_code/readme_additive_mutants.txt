# readme for generating mutants using additive models
---
# generate_additive_mutants.m is run first using matlab, to 
# write amino acid sequences into additive_mutants.txt
---
# then generate_chip_oligos.py is run using python (2.7), to 
# write DNA sequences ready for PCR and cloning into 
# additive_mutant_oligos.txt
---
# the following explains the output of the additive_paths.txt file generated by matlab

file contains the following columns:

	name, method, path_type, temperature, fitness_threshold, minimum_fitness, ins_ok, target_seq, mutant_seq, mutant_mask, group_id, path_id, mutant_id, num_mutations, mutant_score, binary_mask, binary_value

column descriptions:

name: Describes what tissue data was used to generate the mutants. Possible values are {'naive', 'X', 'X-liver', 'X-spleen', 'X-liver-spleen'} where X is any tissue from {'liver', 'kidney', 'spleen', 'skin', 'lung', 'heart', 'brain', 'muscle', 'intestine', 'blood'}.

	naive = Neutral selection, used for random mutations

	X = Tissue X data used for selection, full selection from plasmid to tissue

	For below, we subtract off the fitness for infection of liver and spleen because these are the tissues with the highest efficiency and we hypothesize that one way to increase efficiency to other tissues would be to detarget liver and spleen. (infection data is only from virus to tissue)

		X-liver = Selection for tissue X subtracting infection data from liver. X will never be liver

		X-spleen = Selection for tissue X subtracting infection data from spleen. X will never be spleen

		X-liver-spleen = Selection for tissue X subtracting infection data from liver and from spleen. X will never be liver or spleen

method: Describes the method used to generate the mutations.
	
	temp = Selection based upon fitness and temperature parameter indicated by the 'temperature' column. At each position mutations are chosen with probability 2^(f/T)/Z, where Z sums 2^(f/T) for all mutations at that position (considering substitutions and insertions separately) and where T = 10^temperature

	threshold = Only allow mutations with fitness above a minimum threshold indicated by the 'threshold' column

	min_fit = Only allow mutations where the sum of all individual fitnesses is above a minimum threshold indicated by the 'minimum_fitness' column

path_type: Description of what type of path was generated
	
	fast_path = For a given target sequence, always choose the best mutations first

	rand_path = For a given target sequence, choose the mutations in any order

	min_path = Choose the mutations such that the total fitness is always above a minimum threshold (used for method='min_fit')

	full_sample = For a given target sequence, output all possible binary combinations of mutant and WT at each position

	sub_sample = For a given target sequence, output a random sampling of all possible binary combinations of mutant and WT at each position

	end_point = Output only the target sequence

temperature: Parameter that sets the tendency to choose mutants with higher fitness. If temperature is low then the best mutant is always chosen. If temperature is high then mutants are chosen evenly. For method='temperature' values range between [-2, 0], and for other methods a value of 4.0 is high enough that all mutations have equal probability.

fitness_threshold: Parameter for minimum fitness required to chose a given mutation. For method='threshold' values range between [-1, 2]

minimum_fitness: Parameter for minimum total fitness required for chosing a set of mutations. For method='min_fit' values range between [0, 3]

ins_ok: Whether or not to allow insertions (note that substitutions always allowed)
	
	0 = no insertions, only allow substitutions
	1 = allow insertions in the later portion of the tile but not in the first 14 aa
	2 = allow insertions anywhere

target_seq: The sequence of the final target mutation

mutant_seq: The sequence of the mutant while on a path to the target mutation

mutant_mask: Difference between the 'target_seq' and 'mutant_seq', where '_' indicates a matching aa

group_id: The id within a mutation group

path_id: The id of the path within a mutation group

mutant_id: The id of the mutant within a path

num_mutations: The number of mutations of this mutant away from the WT sequence

mutant_score: The fitness score used when generating the mutant

binary_mask: String representing the mutant on a path away from WT. Considers only the positions that are mutated away from the WT sequence, 0=WT, 1=mutant

binary_value: 'binary_mask' converted to an integer
